let fibonacci = recursive (
    \self -> \n ->
        if :< n 2
        then n
        else :+ (self (:- n 2)) (self (:- n 1))
)

let factorial = recursive (
    \self -> \n ->
        if := n 0
        then 1
        else :* n (self (:- n 1))
)

let squared = \sequence ->
    map (\x -> :* x x) sequence

let sum = \sequence ->
    fold (\x -> \total -> :+ total x) 0 sequence

# i don't know why but it's slow as fuck
let xs = (pair 1 (pair 2 (pair 3 nil)))
let main = sum (squared xs)
