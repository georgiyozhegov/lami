let fibonacci = recursive (
    \self -> \n ->
        if :< n 2
        then n
        else :+ (self (:- n 2)) (self (:- n 1))
)

let factorial = recursive (
    \self -> \n ->
        if := n 0
        then 1
        else :* n (self (:- n 1))
)

let xs = (pair 1 (pair 2 (pair 3 nil)))
let xs = map xs (\x -> :* x x)
let sum = fold xs (\x -> \value -> :+ value x) 0
let main = sum
