let recursive = \self ->
    (\a -> self (\b -> (a a) b))
    (\a -> self (\b -> (a a) b))

let :> = \a -> \b -> :! (:< a b)
let :<= = \a -> \b -> or (:< a b) (:= a b)
let :>= = \a -> \b -> or (:> a b) (:= a b)

let true = 1
let false = 0
let _ = nil

let pair = \first -> \second -> \consumer -> consumer first second

let head = \pair -> pair (\head -> \tail -> head)
let tail = \pair -> pair (\head -> \tail -> tail)

let map = recursive (\self ->
    \sequence -> \transform ->
        if := (tail sequence) nil
        then head sequence
        else pair
            (transform (head sequence))
            (self (tail sequence) transform)
)
